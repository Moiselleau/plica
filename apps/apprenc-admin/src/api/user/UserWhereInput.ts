import { UserBadgeListRelationFilter } from "../userBadge/UserBadgeListRelationFilter";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { StringFilter } from "../../util/StringFilter";
import { BooleanFilter } from "../../util/BooleanFilter";
import { EventParticipantListRelationFilter } from "../eventParticipant/EventParticipantListRelationFilter";
import { GroupMemberListRelationFilter } from "../groupMember/GroupMemberListRelationFilter";
import { NotificationListRelationFilter } from "../notification/NotificationListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { ProfileWhereUniqueInput } from "../profile/ProfileWhereUniqueInput";
import { LikeListRelationFilter } from "../like/LikeListRelationFilter";
import { MessageListRelationFilter } from "../message/MessageListRelationFilter";
import { ReportListRelationFilter } from "../report/ReportListRelationFilter";
import { SocialAccountListRelationFilter } from "../socialAccount/SocialAccountListRelationFilter";
import { StoryListRelationFilter } from "../story/StoryListRelationFilter";
import { SubscriptionWhereUniqueInput } from "../subscription/SubscriptionWhereUniqueInput";
import { FloatFilter } from "../../util/FloatFilter";

export type UserWhereInput = {
  authMethod?: "EMAIL" | "GOOGLE" | "FACEBOOK" | "INSTAGRAM";
  badges?: UserBadgeListRelationFilter;
  createdAt?: DateTimeFilter;
  email?: StringFilter;
  emailVerified?: BooleanFilter;
  events?: EventParticipantListRelationFilter;
  groups?: GroupMemberListRelationFilter;
  id?: StringFilter;
  notifications?: NotificationListRelationFilter;
  passwordHash?: StringNullableFilter;
  phoneNumber?: StringNullableFilter;
  profile?: ProfileWhereUniqueInput;
  receivedLikes?: LikeListRelationFilter;
  receivedMessages?: MessageListRelationFilter;
  reports?: ReportListRelationFilter;
  sentLikes?: LikeListRelationFilter;
  sentMessages?: MessageListRelationFilter;
  socialAccounts?: SocialAccountListRelationFilter;
  stories?: StoryListRelationFilter;
  subscription?: SubscriptionWhereUniqueInput;
  trustScore?: FloatFilter;
  updatedAt?: DateTimeFilter;
  verificationStatus?: "PENDING" | "VERIFIED" | "REJECTED";
};
