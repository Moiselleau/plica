/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Profil as PrismaProfil,
  User as PrismaUser,
} from "@prisma/client";

export class ProfilServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProfilCountArgs, "select">): Promise<number> {
    return this.prisma.profil.count(args);
  }

  async profils(args: Prisma.ProfilFindManyArgs): Promise<PrismaProfil[]> {
    return this.prisma.profil.findMany(args);
  }
  async profil(
    args: Prisma.ProfilFindUniqueArgs
  ): Promise<PrismaProfil | null> {
    return this.prisma.profil.findUnique(args);
  }
  async createProfil(args: Prisma.ProfilCreateArgs): Promise<PrismaProfil> {
    return this.prisma.profil.create(args);
  }
  async updateProfil(args: Prisma.ProfilUpdateArgs): Promise<PrismaProfil> {
    return this.prisma.profil.update(args);
  }
  async deleteProfil(args: Prisma.ProfilDeleteArgs): Promise<PrismaProfil> {
    return this.prisma.profil.delete(args);
  }

  async getUtilisateurs(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.profil
      .findUnique({
        where: { id: parentId },
      })
      .utilisateurs();
  }
}
