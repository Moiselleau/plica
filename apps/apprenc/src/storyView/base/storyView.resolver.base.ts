/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { StoryView } from "./StoryView";
import { StoryViewCountArgs } from "./StoryViewCountArgs";
import { StoryViewFindManyArgs } from "./StoryViewFindManyArgs";
import { StoryViewFindUniqueArgs } from "./StoryViewFindUniqueArgs";
import { CreateStoryViewArgs } from "./CreateStoryViewArgs";
import { UpdateStoryViewArgs } from "./UpdateStoryViewArgs";
import { DeleteStoryViewArgs } from "./DeleteStoryViewArgs";
import { Story } from "../../story/base/Story";
import { StoryViewService } from "../storyView.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StoryView)
export class StoryViewResolverBase {
  constructor(
    protected readonly service: StoryViewService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StoryView",
    action: "read",
    possession: "any",
  })
  async _storyViewsMeta(
    @graphql.Args() args: StoryViewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StoryView])
  @nestAccessControl.UseRoles({
    resource: "StoryView",
    action: "read",
    possession: "any",
  })
  async storyViews(
    @graphql.Args() args: StoryViewFindManyArgs
  ): Promise<StoryView[]> {
    return this.service.storyViews(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StoryView, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StoryView",
    action: "read",
    possession: "own",
  })
  async storyView(
    @graphql.Args() args: StoryViewFindUniqueArgs
  ): Promise<StoryView | null> {
    const result = await this.service.storyView(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StoryView)
  @nestAccessControl.UseRoles({
    resource: "StoryView",
    action: "create",
    possession: "any",
  })
  async createStoryView(
    @graphql.Args() args: CreateStoryViewArgs
  ): Promise<StoryView> {
    return await this.service.createStoryView({
      ...args,
      data: {
        ...args.data,

        story: {
          connect: args.data.story,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StoryView)
  @nestAccessControl.UseRoles({
    resource: "StoryView",
    action: "update",
    possession: "any",
  })
  async updateStoryView(
    @graphql.Args() args: UpdateStoryViewArgs
  ): Promise<StoryView | null> {
    try {
      return await this.service.updateStoryView({
        ...args,
        data: {
          ...args.data,

          story: {
            connect: args.data.story,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StoryView)
  @nestAccessControl.UseRoles({
    resource: "StoryView",
    action: "delete",
    possession: "any",
  })
  async deleteStoryView(
    @graphql.Args() args: DeleteStoryViewArgs
  ): Promise<StoryView | null> {
    try {
      return await this.service.deleteStoryView(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Story, {
    nullable: true,
    name: "story",
  })
  @nestAccessControl.UseRoles({
    resource: "Story",
    action: "read",
    possession: "any",
  })
  async getStory(@graphql.Parent() parent: StoryView): Promise<Story | null> {
    const result = await this.service.getStory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
