/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StoryView as PrismaStoryView,
  Story as PrismaStory,
} from "@prisma/client";

export class StoryViewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StoryViewCountArgs, "select">
  ): Promise<number> {
    return this.prisma.storyView.count(args);
  }

  async storyViews(
    args: Prisma.StoryViewFindManyArgs
  ): Promise<PrismaStoryView[]> {
    return this.prisma.storyView.findMany(args);
  }
  async storyView(
    args: Prisma.StoryViewFindUniqueArgs
  ): Promise<PrismaStoryView | null> {
    return this.prisma.storyView.findUnique(args);
  }
  async createStoryView(
    args: Prisma.StoryViewCreateArgs
  ): Promise<PrismaStoryView> {
    return this.prisma.storyView.create(args);
  }
  async updateStoryView(
    args: Prisma.StoryViewUpdateArgs
  ): Promise<PrismaStoryView> {
    return this.prisma.storyView.update(args);
  }
  async deleteStoryView(
    args: Prisma.StoryViewDeleteArgs
  ): Promise<PrismaStoryView> {
    return this.prisma.storyView.delete(args);
  }

  async getStory(parentId: string): Promise<PrismaStory | null> {
    return this.prisma.storyView
      .findUnique({
        where: { id: parentId },
      })
      .story();
  }
}
