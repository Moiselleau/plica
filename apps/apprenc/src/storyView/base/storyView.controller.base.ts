/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StoryViewService } from "../storyView.service";
import { StoryViewCreateInput } from "./StoryViewCreateInput";
import { StoryView } from "./StoryView";
import { StoryViewFindManyArgs } from "./StoryViewFindManyArgs";
import { StoryViewWhereUniqueInput } from "./StoryViewWhereUniqueInput";
import { StoryViewUpdateInput } from "./StoryViewUpdateInput";

export class StoryViewControllerBase {
  constructor(protected readonly service: StoryViewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StoryView })
  async createStoryView(
    @common.Body() data: StoryViewCreateInput
  ): Promise<StoryView> {
    return await this.service.createStoryView({
      data: {
        ...data,

        story: {
          connect: data.story,
        },
      },
      select: {
        id: true,

        story: {
          select: {
            id: true,
          },
        },

        viewedAt: true,
        viewerId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StoryView] })
  @ApiNestedQuery(StoryViewFindManyArgs)
  async storyViews(@common.Req() request: Request): Promise<StoryView[]> {
    const args = plainToClass(StoryViewFindManyArgs, request.query);
    return this.service.storyViews({
      ...args,
      select: {
        id: true,

        story: {
          select: {
            id: true,
          },
        },

        viewedAt: true,
        viewerId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StoryView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async storyView(
    @common.Param() params: StoryViewWhereUniqueInput
  ): Promise<StoryView | null> {
    const result = await this.service.storyView({
      where: params,
      select: {
        id: true,

        story: {
          select: {
            id: true,
          },
        },

        viewedAt: true,
        viewerId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StoryView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStoryView(
    @common.Param() params: StoryViewWhereUniqueInput,
    @common.Body() data: StoryViewUpdateInput
  ): Promise<StoryView | null> {
    try {
      return await this.service.updateStoryView({
        where: params,
        data: {
          ...data,

          story: {
            connect: data.story,
          },
        },
        select: {
          id: true,

          story: {
            select: {
              id: true,
            },
          },

          viewedAt: true,
          viewerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StoryView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStoryView(
    @common.Param() params: StoryViewWhereUniqueInput
  ): Promise<StoryView | null> {
    try {
      return await this.service.deleteStoryView({
        where: params,
        select: {
          id: true,

          story: {
            select: {
              id: true,
            },
          },

          viewedAt: true,
          viewerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
