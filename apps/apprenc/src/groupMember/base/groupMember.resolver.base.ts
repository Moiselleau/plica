/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GroupMember } from "./GroupMember";
import { GroupMemberCountArgs } from "./GroupMemberCountArgs";
import { GroupMemberFindManyArgs } from "./GroupMemberFindManyArgs";
import { GroupMemberFindUniqueArgs } from "./GroupMemberFindUniqueArgs";
import { CreateGroupMemberArgs } from "./CreateGroupMemberArgs";
import { UpdateGroupMemberArgs } from "./UpdateGroupMemberArgs";
import { DeleteGroupMemberArgs } from "./DeleteGroupMemberArgs";
import { Group } from "../../group/base/Group";
import { User } from "../../user/base/User";
import { GroupMemberService } from "../groupMember.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GroupMember)
export class GroupMemberResolverBase {
  constructor(
    protected readonly service: GroupMemberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "read",
    possession: "any",
  })
  async _groupMembersMeta(
    @graphql.Args() args: GroupMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GroupMember])
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "read",
    possession: "any",
  })
  async groupMembers(
    @graphql.Args() args: GroupMemberFindManyArgs
  ): Promise<GroupMember[]> {
    return this.service.groupMembers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GroupMember, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "read",
    possession: "own",
  })
  async groupMember(
    @graphql.Args() args: GroupMemberFindUniqueArgs
  ): Promise<GroupMember | null> {
    const result = await this.service.groupMember(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupMember)
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "create",
    possession: "any",
  })
  async createGroupMember(
    @graphql.Args() args: CreateGroupMemberArgs
  ): Promise<GroupMember> {
    return await this.service.createGroupMember({
      ...args,
      data: {
        ...args.data,

        group: {
          connect: args.data.group,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupMember)
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "update",
    possession: "any",
  })
  async updateGroupMember(
    @graphql.Args() args: UpdateGroupMemberArgs
  ): Promise<GroupMember | null> {
    try {
      return await this.service.updateGroupMember({
        ...args,
        data: {
          ...args.data,

          group: {
            connect: args.data.group,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GroupMember)
  @nestAccessControl.UseRoles({
    resource: "GroupMember",
    action: "delete",
    possession: "any",
  })
  async deleteGroupMember(
    @graphql.Args() args: DeleteGroupMemberArgs
  ): Promise<GroupMember | null> {
    try {
      return await this.service.deleteGroupMember(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async getGroup(@graphql.Parent() parent: GroupMember): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: GroupMember): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
