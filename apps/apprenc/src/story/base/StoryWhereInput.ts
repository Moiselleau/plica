/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { StringFilter } from "../../util/StringFilter";
import { EnumStoryType } from "./EnumStoryType";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { StoryViewListRelationFilter } from "../../storyView/base/StoryViewListRelationFilter";

@InputType()
class StoryWhereInput {
  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  expiresAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  mediaUrl?: StringFilter;

  @ApiProperty({
    required: false,
    enum: EnumStoryType,
  })
  @IsEnum(EnumStoryType)
  @IsOptional()
  @Field(() => EnumStoryType, {
    nullable: true,
  })
  type?: "IMAGE" | "VIDEO" | "AUDIO";

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => StoryViewListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StoryViewListRelationFilter)
  @IsOptional()
  @Field(() => StoryViewListRelationFilter, {
    nullable: true,
  })
  views?: StoryViewListRelationFilter;
}

export { StoryWhereInput as StoryWhereInput };
