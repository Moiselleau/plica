/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InterestService } from "../interest.service";
import { InterestCreateInput } from "./InterestCreateInput";
import { Interest } from "./Interest";
import { InterestFindManyArgs } from "./InterestFindManyArgs";
import { InterestWhereUniqueInput } from "./InterestWhereUniqueInput";
import { InterestUpdateInput } from "./InterestUpdateInput";
import { GroupFindManyArgs } from "../../group/base/GroupFindManyArgs";
import { Group } from "../../group/base/Group";
import { GroupWhereUniqueInput } from "../../group/base/GroupWhereUniqueInput";
import { ProfileFindManyArgs } from "../../profile/base/ProfileFindManyArgs";
import { Profile } from "../../profile/base/Profile";
import { ProfileWhereUniqueInput } from "../../profile/base/ProfileWhereUniqueInput";

export class InterestControllerBase {
  constructor(protected readonly service: InterestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Interest })
  async createInterest(
    @common.Body() data: InterestCreateInput
  ): Promise<Interest> {
    return await this.service.createInterest({
      data: data,
      select: {
        category: true,
        id: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Interest] })
  @ApiNestedQuery(InterestFindManyArgs)
  async interests(@common.Req() request: Request): Promise<Interest[]> {
    const args = plainToClass(InterestFindManyArgs, request.query);
    return this.service.interests({
      ...args,
      select: {
        category: true,
        id: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Interest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async interest(
    @common.Param() params: InterestWhereUniqueInput
  ): Promise<Interest | null> {
    const result = await this.service.interest({
      where: params,
      select: {
        category: true,
        id: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Interest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInterest(
    @common.Param() params: InterestWhereUniqueInput,
    @common.Body() data: InterestUpdateInput
  ): Promise<Interest | null> {
    try {
      return await this.service.updateInterest({
        where: params,
        data: data,
        select: {
          category: true,
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Interest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInterest(
    @common.Param() params: InterestWhereUniqueInput
  ): Promise<Interest | null> {
    try {
      return await this.service.deleteInterest({
        where: params,
        select: {
          category: true,
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/groups")
  @ApiNestedQuery(GroupFindManyArgs)
  async findGroups(
    @common.Req() request: Request,
    @common.Param() params: InterestWhereUniqueInput
  ): Promise<Group[]> {
    const query = plainToClass(GroupFindManyArgs, request.query);
    const results = await this.service.findGroups(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/groups")
  async connectGroups(
    @common.Param() params: InterestWhereUniqueInput,
    @common.Body() body: GroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groups: {
        connect: body,
      },
    };
    await this.service.updateInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/groups")
  async updateGroups(
    @common.Param() params: InterestWhereUniqueInput,
    @common.Body() body: GroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groups: {
        set: body,
      },
    };
    await this.service.updateInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/groups")
  async disconnectGroups(
    @common.Param() params: InterestWhereUniqueInput,
    @common.Body() body: GroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groups: {
        disconnect: body,
      },
    };
    await this.service.updateInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/profiles")
  @ApiNestedQuery(ProfileFindManyArgs)
  async findProfiles(
    @common.Req() request: Request,
    @common.Param() params: InterestWhereUniqueInput
  ): Promise<Profile[]> {
    const query = plainToClass(ProfileFindManyArgs, request.query);
    const results = await this.service.findProfiles(params.id, {
      ...query,
      select: {
        bio: true,
        bioAudio: true,
        bioVideo: true,
        birthDate: true,
        city: true,
        country: true,
        firstName: true,
        gender: true,
        id: true,
        lastActive: true,
        lastName: true,
        latitude: true,
        longitude: true,
        matchCount: true,

        preferences: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        viewCount: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/profiles")
  async connectProfiles(
    @common.Param() params: InterestWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        connect: body,
      },
    };
    await this.service.updateInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/profiles")
  async updateProfiles(
    @common.Param() params: InterestWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        set: body,
      },
    };
    await this.service.updateInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/profiles")
  async disconnectProfiles(
    @common.Param() params: InterestWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        disconnect: body,
      },
    };
    await this.service.updateInterest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
