/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EventParticipant as PrismaEventParticipant,
  Event as PrismaEvent,
  User as PrismaUser,
} from "@prisma/client";

export class EventParticipantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventParticipantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventParticipant.count(args);
  }

  async eventParticipants(
    args: Prisma.EventParticipantFindManyArgs
  ): Promise<PrismaEventParticipant[]> {
    return this.prisma.eventParticipant.findMany(args);
  }
  async eventParticipant(
    args: Prisma.EventParticipantFindUniqueArgs
  ): Promise<PrismaEventParticipant | null> {
    return this.prisma.eventParticipant.findUnique(args);
  }
  async createEventParticipant(
    args: Prisma.EventParticipantCreateArgs
  ): Promise<PrismaEventParticipant> {
    return this.prisma.eventParticipant.create(args);
  }
  async updateEventParticipant(
    args: Prisma.EventParticipantUpdateArgs
  ): Promise<PrismaEventParticipant> {
    return this.prisma.eventParticipant.update(args);
  }
  async deleteEventParticipant(
    args: Prisma.EventParticipantDeleteArgs
  ): Promise<PrismaEventParticipant> {
    return this.prisma.eventParticipant.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.eventParticipant
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.eventParticipant
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
