/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EventParticipant } from "./EventParticipant";
import { EventParticipantCountArgs } from "./EventParticipantCountArgs";
import { EventParticipantFindManyArgs } from "./EventParticipantFindManyArgs";
import { EventParticipantFindUniqueArgs } from "./EventParticipantFindUniqueArgs";
import { CreateEventParticipantArgs } from "./CreateEventParticipantArgs";
import { UpdateEventParticipantArgs } from "./UpdateEventParticipantArgs";
import { DeleteEventParticipantArgs } from "./DeleteEventParticipantArgs";
import { Event } from "../../event/base/Event";
import { User } from "../../user/base/User";
import { EventParticipantService } from "../eventParticipant.service";
@graphql.Resolver(() => EventParticipant)
export class EventParticipantResolverBase {
  constructor(protected readonly service: EventParticipantService) {}

  async _eventParticipantsMeta(
    @graphql.Args() args: EventParticipantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EventParticipant])
  async eventParticipants(
    @graphql.Args() args: EventParticipantFindManyArgs
  ): Promise<EventParticipant[]> {
    return this.service.eventParticipants(args);
  }

  @graphql.Query(() => EventParticipant, { nullable: true })
  async eventParticipant(
    @graphql.Args() args: EventParticipantFindUniqueArgs
  ): Promise<EventParticipant | null> {
    const result = await this.service.eventParticipant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EventParticipant)
  async createEventParticipant(
    @graphql.Args() args: CreateEventParticipantArgs
  ): Promise<EventParticipant> {
    return await this.service.createEventParticipant({
      ...args,
      data: {
        ...args.data,

        event: {
          connect: args.data.event,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => EventParticipant)
  async updateEventParticipant(
    @graphql.Args() args: UpdateEventParticipantArgs
  ): Promise<EventParticipant | null> {
    try {
      return await this.service.updateEventParticipant({
        ...args,
        data: {
          ...args.data,

          event: {
            connect: args.data.event,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventParticipant)
  async deleteEventParticipant(
    @graphql.Args() args: DeleteEventParticipantArgs
  ): Promise<EventParticipant | null> {
    try {
      return await this.service.deleteEventParticipant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  async getEvent(
    @graphql.Parent() parent: EventParticipant
  ): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: EventParticipant
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
