/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumUserAuthMethod } from "./EnumUserAuthMethod";

import {
  IsEnum,
  IsOptional,
  ValidateNested,
  IsString,
  MaxLength,
  IsBoolean,
  IsNumber,
  Max,
} from "class-validator";

import { UserBadgeUpdateManyWithoutUsersInput } from "./UserBadgeUpdateManyWithoutUsersInput";
import { Type } from "class-transformer";
import { EventParticipantUpdateManyWithoutUsersInput } from "./EventParticipantUpdateManyWithoutUsersInput";
import { GroupMemberUpdateManyWithoutUsersInput } from "./GroupMemberUpdateManyWithoutUsersInput";
import { NotificationUpdateManyWithoutUsersInput } from "./NotificationUpdateManyWithoutUsersInput";
import { ProfileWhereUniqueInput } from "../../profile/base/ProfileWhereUniqueInput";
import { LikeUpdateManyWithoutUsersInput } from "./LikeUpdateManyWithoutUsersInput";
import { MessageUpdateManyWithoutUsersInput } from "./MessageUpdateManyWithoutUsersInput";
import { ReportUpdateManyWithoutUsersInput } from "./ReportUpdateManyWithoutUsersInput";
import { SocialAccountUpdateManyWithoutUsersInput } from "./SocialAccountUpdateManyWithoutUsersInput";
import { StoryUpdateManyWithoutUsersInput } from "./StoryUpdateManyWithoutUsersInput";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";
import { EnumUserVerificationStatus } from "./EnumUserVerificationStatus";

@InputType()
class UserUpdateInput {
  @ApiProperty({
    required: false,
    enum: EnumUserAuthMethod,
  })
  @IsEnum(EnumUserAuthMethod)
  @IsOptional()
  @Field(() => EnumUserAuthMethod, {
    nullable: true,
  })
  authMethod?: "EMAIL" | "GOOGLE" | "FACEBOOK" | "INSTAGRAM";

  @ApiProperty({
    required: false,
    type: () => UserBadgeUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => UserBadgeUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => UserBadgeUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  badges?: UserBadgeUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  emailVerified?: boolean;

  @ApiProperty({
    required: false,
    type: () => EventParticipantUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => EventParticipantUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => EventParticipantUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  events?: EventParticipantUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => GroupMemberUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => GroupMemberUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => GroupMemberUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  groups?: GroupMemberUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => NotificationUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => NotificationUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => NotificationUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  notifications?: NotificationUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber?: string | null;

  @ApiProperty({
    required: false,
    type: () => ProfileWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProfileWhereUniqueInput)
  @IsOptional()
  @Field(() => ProfileWhereUniqueInput, {
    nullable: true,
  })
  profile?: ProfileWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => LikeUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => LikeUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => LikeUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  receivedLikes?: LikeUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => MessageUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  receivedMessages?: MessageUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ReportUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ReportUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ReportUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  reports?: ReportUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  roles?: string;

  @ApiProperty({
    required: false,
    type: () => LikeUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => LikeUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => LikeUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  sentLikes?: LikeUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => MessageUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  sentMessages?: MessageUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SocialAccountUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SocialAccountUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SocialAccountUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  socialAccounts?: SocialAccountUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => StoryUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => StoryUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => StoryUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  stories?: StoryUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SubscriptionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SubscriptionWhereUniqueInput)
  @IsOptional()
  @Field(() => SubscriptionWhereUniqueInput, {
    nullable: true,
  })
  subscription?: SubscriptionWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  trustScore?: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string;

  @ApiProperty({
    required: false,
    enum: EnumUserVerificationStatus,
  })
  @IsEnum(EnumUserVerificationStatus)
  @IsOptional()
  @Field(() => EnumUserVerificationStatus, {
    nullable: true,
  })
  verificationStatus?: "PENDING" | "VERIFIED" | "REJECTED";
}

export { UserUpdateInput as UserUpdateInput };
