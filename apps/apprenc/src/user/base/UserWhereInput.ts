/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumUserAuthMethod } from "./EnumUserAuthMethod";
import { IsEnum, IsOptional, ValidateNested } from "class-validator";
import { UserBadgeListRelationFilter } from "../../userBadge/base/UserBadgeListRelationFilter";
import { Type } from "class-transformer";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { StringFilter } from "../../util/StringFilter";
import { BooleanFilter } from "../../util/BooleanFilter";
import { EventParticipantListRelationFilter } from "../../eventParticipant/base/EventParticipantListRelationFilter";
import { GroupMemberListRelationFilter } from "../../groupMember/base/GroupMemberListRelationFilter";
import { NotificationListRelationFilter } from "../../notification/base/NotificationListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { ProfileWhereUniqueInput } from "../../profile/base/ProfileWhereUniqueInput";
import { LikeListRelationFilter } from "../../like/base/LikeListRelationFilter";
import { MessageListRelationFilter } from "../../message/base/MessageListRelationFilter";
import { ReportListRelationFilter } from "../../report/base/ReportListRelationFilter";
import { SocialAccountListRelationFilter } from "../../socialAccount/base/SocialAccountListRelationFilter";
import { StoryListRelationFilter } from "../../story/base/StoryListRelationFilter";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";
import { FloatFilter } from "../../util/FloatFilter";
import { EnumUserVerificationStatus } from "./EnumUserVerificationStatus";

@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    enum: EnumUserAuthMethod,
  })
  @IsEnum(EnumUserAuthMethod)
  @IsOptional()
  @Field(() => EnumUserAuthMethod, {
    nullable: true,
  })
  authMethod?: "EMAIL" | "GOOGLE" | "FACEBOOK" | "INSTAGRAM";

  @ApiProperty({
    required: false,
    type: () => UserBadgeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserBadgeListRelationFilter)
  @IsOptional()
  @Field(() => UserBadgeListRelationFilter, {
    nullable: true,
  })
  badges?: UserBadgeListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  email?: StringFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  emailVerified?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: () => EventParticipantListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EventParticipantListRelationFilter)
  @IsOptional()
  @Field(() => EventParticipantListRelationFilter, {
    nullable: true,
  })
  events?: EventParticipantListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => GroupMemberListRelationFilter,
  })
  @ValidateNested()
  @Type(() => GroupMemberListRelationFilter)
  @IsOptional()
  @Field(() => GroupMemberListRelationFilter, {
    nullable: true,
  })
  groups?: GroupMemberListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => NotificationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NotificationListRelationFilter)
  @IsOptional()
  @Field(() => NotificationListRelationFilter, {
    nullable: true,
  })
  notifications?: NotificationListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  phoneNumber?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ProfileWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProfileWhereUniqueInput)
  @IsOptional()
  @Field(() => ProfileWhereUniqueInput, {
    nullable: true,
  })
  profile?: ProfileWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => LikeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LikeListRelationFilter)
  @IsOptional()
  @Field(() => LikeListRelationFilter, {
    nullable: true,
  })
  receivedLikes?: LikeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => MessageListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MessageListRelationFilter)
  @IsOptional()
  @Field(() => MessageListRelationFilter, {
    nullable: true,
  })
  receivedMessages?: MessageListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ReportListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReportListRelationFilter)
  @IsOptional()
  @Field(() => ReportListRelationFilter, {
    nullable: true,
  })
  reports?: ReportListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  roles?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => LikeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LikeListRelationFilter)
  @IsOptional()
  @Field(() => LikeListRelationFilter, {
    nullable: true,
  })
  sentLikes?: LikeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => MessageListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MessageListRelationFilter)
  @IsOptional()
  @Field(() => MessageListRelationFilter, {
    nullable: true,
  })
  sentMessages?: MessageListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SocialAccountListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SocialAccountListRelationFilter)
  @IsOptional()
  @Field(() => SocialAccountListRelationFilter, {
    nullable: true,
  })
  socialAccounts?: SocialAccountListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StoryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StoryListRelationFilter)
  @IsOptional()
  @Field(() => StoryListRelationFilter, {
    nullable: true,
  })
  stories?: StoryListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SubscriptionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SubscriptionWhereUniqueInput)
  @IsOptional()
  @Field(() => SubscriptionWhereUniqueInput, {
    nullable: true,
  })
  subscription?: SubscriptionWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: FloatFilter,
  })
  @Type(() => FloatFilter)
  @IsOptional()
  @Field(() => FloatFilter, {
    nullable: true,
  })
  trustScore?: FloatFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  username?: StringFilter;

  @ApiProperty({
    required: false,
    enum: EnumUserVerificationStatus,
  })
  @IsEnum(EnumUserVerificationStatus)
  @IsOptional()
  @Field(() => EnumUserVerificationStatus, {
    nullable: true,
  })
  verificationStatus?: "PENDING" | "VERIFIED" | "REJECTED";
}

export { UserWhereInput as UserWhereInput };
