/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User as PrismaUser,
  UserBadge as PrismaUserBadge,
  EventParticipant as PrismaEventParticipant,
  GroupMember as PrismaGroupMember,
  Notification as PrismaNotification,
  Like as PrismaLike,
  Message as PrismaMessage,
  Report as PrismaReport,
  SocialAccount as PrismaSocialAccount,
  Story as PrismaStory,
  Profile as PrismaProfile,
  Subscription as PrismaSubscription,
} from "@prisma/client";

export class UserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    return this.prisma.user.findMany(args);
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create(args);
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update(args);
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async findBadges(
    parentId: string,
    args: Prisma.UserBadgeFindManyArgs
  ): Promise<PrismaUserBadge[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .badges(args);
  }

  async findEvents(
    parentId: string,
    args: Prisma.EventParticipantFindManyArgs
  ): Promise<PrismaEventParticipant[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .events(args);
  }

  async findGroups(
    parentId: string,
    args: Prisma.GroupMemberFindManyArgs
  ): Promise<PrismaGroupMember[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .groups(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findReceivedLikes(
    parentId: string,
    args: Prisma.LikeFindManyArgs
  ): Promise<PrismaLike[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .receivedLikes(args);
  }

  async findReceivedMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .receivedMessages(args);
  }

  async findReports(
    parentId: string,
    args: Prisma.ReportFindManyArgs
  ): Promise<PrismaReport[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reports(args);
  }

  async findSentLikes(
    parentId: string,
    args: Prisma.LikeFindManyArgs
  ): Promise<PrismaLike[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sentLikes(args);
  }

  async findSentMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sentMessages(args);
  }

  async findSocialAccounts(
    parentId: string,
    args: Prisma.SocialAccountFindManyArgs
  ): Promise<PrismaSocialAccount[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .socialAccounts(args);
  }

  async findStories(
    parentId: string,
    args: Prisma.StoryFindManyArgs
  ): Promise<PrismaStory[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stories(args);
  }

  async getProfile(parentId: string): Promise<PrismaProfile | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .profile();
  }

  async getSubscription(parentId: string): Promise<PrismaSubscription | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .subscription();
  }
}
