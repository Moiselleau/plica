/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProfileService } from "../profile.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProfileCreateInput } from "./ProfileCreateInput";
import { Profile } from "./Profile";
import { ProfileFindManyArgs } from "./ProfileFindManyArgs";
import { ProfileWhereUniqueInput } from "./ProfileWhereUniqueInput";
import { ProfileUpdateInput } from "./ProfileUpdateInput";
import { InterestFindManyArgs } from "../../interest/base/InterestFindManyArgs";
import { Interest } from "../../interest/base/Interest";
import { InterestWhereUniqueInput } from "../../interest/base/InterestWhereUniqueInput";
import { PhotoFindManyArgs } from "../../photo/base/PhotoFindManyArgs";
import { Photo } from "../../photo/base/Photo";
import { PhotoWhereUniqueInput } from "../../photo/base/PhotoWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProfileControllerBase {
  constructor(
    protected readonly service: ProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Profile })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProfile(
    @common.Body() data: ProfileCreateInput
  ): Promise<Profile> {
    return await this.service.createProfile({
      data: {
        ...data,

        preferences: data.preferences
          ? {
              connect: data.preferences,
            }
          : undefined,

        user: {
          connect: data.user,
        },
      },
      select: {
        bio: true,
        bioAudio: true,
        bioVideo: true,
        birthDate: true,
        city: true,
        country: true,
        firstName: true,
        gender: true,
        id: true,
        lastActive: true,
        lastName: true,
        latitude: true,
        longitude: true,
        matchCount: true,

        preferences: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        viewCount: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Profile] })
  @ApiNestedQuery(ProfileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async profiles(@common.Req() request: Request): Promise<Profile[]> {
    const args = plainToClass(ProfileFindManyArgs, request.query);
    return this.service.profiles({
      ...args,
      select: {
        bio: true,
        bioAudio: true,
        bioVideo: true,
        birthDate: true,
        city: true,
        country: true,
        firstName: true,
        gender: true,
        id: true,
        lastActive: true,
        lastName: true,
        latitude: true,
        longitude: true,
        matchCount: true,

        preferences: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        viewCount: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Profile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async profile(
    @common.Param() params: ProfileWhereUniqueInput
  ): Promise<Profile | null> {
    const result = await this.service.profile({
      where: params,
      select: {
        bio: true,
        bioAudio: true,
        bioVideo: true,
        birthDate: true,
        city: true,
        country: true,
        firstName: true,
        gender: true,
        id: true,
        lastActive: true,
        lastName: true,
        latitude: true,
        longitude: true,
        matchCount: true,

        preferences: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        viewCount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Profile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProfile(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() data: ProfileUpdateInput
  ): Promise<Profile | null> {
    try {
      return await this.service.updateProfile({
        where: params,
        data: {
          ...data,

          preferences: data.preferences
            ? {
                connect: data.preferences,
              }
            : undefined,

          user: {
            connect: data.user,
          },
        },
        select: {
          bio: true,
          bioAudio: true,
          bioVideo: true,
          birthDate: true,
          city: true,
          country: true,
          firstName: true,
          gender: true,
          id: true,
          lastActive: true,
          lastName: true,
          latitude: true,
          longitude: true,
          matchCount: true,

          preferences: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          viewCount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Profile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProfile(
    @common.Param() params: ProfileWhereUniqueInput
  ): Promise<Profile | null> {
    try {
      return await this.service.deleteProfile({
        where: params,
        select: {
          bio: true,
          bioAudio: true,
          bioVideo: true,
          birthDate: true,
          city: true,
          country: true,
          firstName: true,
          gender: true,
          id: true,
          lastActive: true,
          lastName: true,
          latitude: true,
          longitude: true,
          matchCount: true,

          preferences: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          viewCount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/interests")
  @ApiNestedQuery(InterestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Interest",
    action: "read",
    possession: "any",
  })
  async findInterests(
    @common.Req() request: Request,
    @common.Param() params: ProfileWhereUniqueInput
  ): Promise<Interest[]> {
    const query = plainToClass(InterestFindManyArgs, request.query);
    const results = await this.service.findInterests(params.id, {
      ...query,
      select: {
        category: true,
        id: true,
        name: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/interests")
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  async connectInterests(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() body: InterestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interests: {
        connect: body,
      },
    };
    await this.service.updateProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/interests")
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  async updateInterests(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() body: InterestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interests: {
        set: body,
      },
    };
    await this.service.updateProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/interests")
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  async disconnectInterests(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() body: InterestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interests: {
        disconnect: body,
      },
    };
    await this.service.updateProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/photos")
  @ApiNestedQuery(PhotoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "any",
  })
  async findPhotos(
    @common.Req() request: Request,
    @common.Param() params: ProfileWhereUniqueInput
  ): Promise<Photo[]> {
    const query = plainToClass(PhotoFindManyArgs, request.query);
    const results = await this.service.findPhotos(params.id, {
      ...query,
      select: {
        id: true,
        isMain: true,

        profile: {
          select: {
            id: true,
          },
        },

        url: true,
        verified: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/photos")
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  async connectPhotos(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() body: PhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      photos: {
        connect: body,
      },
    };
    await this.service.updateProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/photos")
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  async updatePhotos(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() body: PhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      photos: {
        set: body,
      },
    };
    await this.service.updateProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/photos")
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  async disconnectPhotos(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() body: PhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      photos: {
        disconnect: body,
      },
    };
    await this.service.updateProfile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
